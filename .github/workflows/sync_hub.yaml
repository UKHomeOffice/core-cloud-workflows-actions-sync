name: Reusable workflow for GHES sync.

on:
  workflow_call:
    inputs:
      ghes-instances:
        description: 'A multi-line list of GHES instances to sync this workflow with'
        required: true
        type: string

jobs:
  generate-matrix:
    runs-on: cc-ghec-actions-runner 
    outputs:
      ghes_hostname: ${{ steps.set-matrix.outputs.ghes_hostname }}
    steps:
      - name: Generate matrix from the ghes-instances input
        id: set-matrix
        run: |
          ghes_json=$(echo "${{ inputs.ghes-instances }}" | jq -c -R -s 'split("\n") | map(select(length > 0))')
          echo "ghes_hostname=${ghes_json}" >> $GITHUB_OUTPUT

  sync-to-ghes:
    needs: generate-matrix
    runs-on: cc-ghec-actions-runner
    strategy:
      max-parallel: 1
      matrix:
        ghes: ${{ fromJSON(needs.generate-matrix.outputs.ghes_hostname) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse GHES Host
        id: parse-host
        run: |
          hostname=$(echo "${{ matrix.ghes }}" | sed -E 's#^https?://([^/]+)/?#\1#')
          echo "hostname=$hostname" >> $GITHUB_OUTPUT

      - name: Debug
        id: debug
        run: |
          openssl s_client -connect github.ci.core.homeoffice.gov.uk:443

      - name: Generate GitHub App Token for GHES
        id: get_ghes_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GHES_APP_ID }}
          private-key: ${{ secrets.GHES_PRIVATE_KEY }}
          github-api-url: 'https://${{ steps.parse-host.outputs.hostname }}'
          owner: 'ho-actions-mirror'

      - name: Create GHES repo if it doesn't exist
        env:
          GH_TOKEN: ${{ steps.get_ghes_token.outputs.token }}
          GH_HOST: ${{ steps.parse-host.outputs.hostname }}
          REPO_PATH: ${{ github.repository }}
        run: |
          # We check if the repo exists. The `gh repo view` command will fail (exit with a non-zero status) if it doesn't.
          if ! gh repo view "${REPO_PATH}"; then
            echo "Repository ${{ env.REPO_PATH }} does not exist on ${{ env.GH_HOST }}. Creating it now..."
            gh repo create "${REPO_PATH}" --public
            echo "Repository created successfully."
          else
            echo "Repository ${{ env.REPO_PATH }} already exists on ${{ env.GH_HOST }}."
          fi

      - name: Set up GHES remote and push
        env:
          GHES_TOKEN: ${{ steps.get_ghes_token.outputs.token }}
          GHES_HOST: ${{ matrix.ghes }}
          REPO_PATH: ${{ github.repository }}
        run: |
          git config --global user.name "GitHub Actions Sync"
          git config --global user.email "actions-sync@homeoffice.gov.uk"
          
          full_ghes_url="${GHES_HOST}/${REPO_PATH}.git"
          echo "Constructed full GHES URL: ${full_ghes_url}"

          git remote add ghes "https://x-access-token:${GHES_TOKEN}@${full_ghes_url#https://}"
          
          echo "GHES remote added for ${full_ghes_url}"
          echo "Pushing to GHES..."

          git push --all ghes --force
          git push --tags ghes --force
          
          echo "Sync to ${full_ghes_url} complete."
