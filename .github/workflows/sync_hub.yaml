name: Reusable workflow for GHES sync.

on:
  workflow_call:
    inputs:
      ghes-instances:
        description: 'A multi-line list of GHES instances to sync this workflow with'
        required: true
        type: string
      ghes-owner:
        description: 'a multi-line list of organisations where the workflows are being synced to. Make sure they are in the same order as your GHES instances'
        required: true
        type: string
    secrets:
      APP_ID:
        required: true
      PRIVATE_KEY:
        required: true

jobs:
  generate-matrix:
    runs-on: cc-ghec-actions-runner 
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix from the ghes-instances input
        id: set-matrix
        env:
          INSTANCES: ${{ inputs.ghes-instances }}
          OWNERS: ${{ inputs.ghes-owner }}
        run: |
          matrix_json=$(jq -cn --arg instances "$INSTANCES" --arg owners "$OWNERS" '
            [
              ($instances | split("\n")) as $i |
              ($owners | split("\n")) as $o |
              range($i | length) |
              # Ensure we only process lines that have both an instance and an owner
              select($i[.] != "" and $o[.] != "") |
              {
                "url": $i[.],
                "owner": $o[.]
              }
            ]
          ')
          echo "matrix=${matrix_json}" >> $GITHUB_OUTPUT

  sync-to-ghes:
    needs: generate-matrix
    runs-on: cc-ghec-actions-runner
    strategy:
      max-parallel: 1
      matrix:
        instance: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse GHES Host
        id: parse-host
        run: |
          hostname=$(echo "${{ matrix.instance.url }}" | sed -E 's#^https?://([^/]+)/?#\1#')
          echo "hostname=$hostname" >> $GITHUB_OUTPUT

      - name: üß™ Verify Secrets Format
        env:
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "### Verifying App ID ###"
          if [ -z "$APP_ID" ]; then
            echo "‚ùå ERROR: App ID secret is empty or not available."
          elif [[ "$APP_ID" =~ ^[0-9]+$ ]]; then
            echo "‚úÖ OK: App ID is present and appears to be a valid number."
          else
            echo "‚ùå ERROR: App ID contains non-numeric characters."
          fi

          echo ""
          echo "### Verifying Private Key ###"
          if [ -z "$PRIVATE_KEY" ]; then
            echo "‚ùå ERROR: Private Key secret is empty or not available."
          else
            echo "‚úÖ OK: Private Key is present."
            # Check for the required header and footer
            if ! echo "$PRIVATE_KEY" | grep -q "BEGIN RSA PRIVATE KEY"; then
              echo "‚ùå ERROR: Private key is MISSING the 'BEGIN RSA PRIVATE KEY' header."
            else
              echo "‚úÖ OK: Found 'BEGIN' header."
            fi
            if ! echo "$PRIVATE_KEY" | grep -q "END RSA PRIVATE KEY"; then
              echo "‚ùå ERROR: Private key is MISSING the 'END RSA PRIVATE KEY' footer."
            else
              echo "‚úÖ OK: Found 'END' footer."
            fi
            # Check the line count
            line_count=$(echo "$PRIVATE_KEY" | wc -l)
            echo "   - Key has $line_count lines. (A single line is a common error)."
          fi

      - name: Generate GitHub App Token for GHES
        id: get_ghes_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          github-api-url: 'https://${{ steps.parse-host.outputs.hostname }}'
          owner: '${{ matrix.instance.owner }}'

      - name: Create GHES repo if it doesn't exist
        env:
          GH_TOKEN: ${{ steps.get_ghes_token.outputs.token }}
          GH_HOST: ${{ steps.parse-host.outputs.hostname }}
          REPO_PATH: ${{ github.repository }}
        run: |
          # We check if the repo exists. The `gh repo view` command will fail (exit with a non-zero status) if it doesn't.
          if ! gh repo view "${REPO_PATH}"; then
            echo "Repository ${{ env.REPO_PATH }} does not exist on ${{ env.GH_HOST }}. Creating it now..."
            gh repo create "${REPO_PATH}" --public
            echo "Repository created successfully."
          else
            echo "Repository ${{ env.REPO_PATH }} already exists on ${{ env.GH_HOST }}."
          fi

      - name: Set up GHES remote and push
        env:
          GHES_TOKEN: ${{ steps.get_ghes_token.outputs.token }}
          GHES_HOST: ${{ matrix.ghes }}
          REPO_PATH: ${{ github.repository }}
        run: |
          git config --global user.name "GitHub Actions Sync"
          git config --global user.email "actions-sync@homeoffice.gov.uk"
          
          full_ghes_url="${GHES_HOST}/${REPO_PATH}.git"
          echo "Constructed full GHES URL: ${full_ghes_url}"

          git remote add ghes "https://x-access-token:${GHES_TOKEN}@${full_ghes_url#https://}"
          
          echo "GHES remote added for ${full_ghes_url}"
          echo "Pushing to GHES..."

          git push --all ghes --force
          git push --tags ghes --force
          
          echo "Sync to ${full_ghes_url} complete."
